🔹 Phase 3: Output Module Enhancements
Module	Purpose
✅ OutputWriter	Write processed data to file
🔜 OutputWriter++	Enhance to support output to stdout, JSON format, and timestamps
🔜 OutputFormatter	Format output based on config (plain text, JSON, CSV, etc.)

🔹 Phase 4: Extensibility & Modularity
Module	Purpose
🔜 APIDataSource	Fetch data from a REST API using libcurl
🔜 DataSourceFactory	Dynamically create appropriate DataSource based on config
🔜 ConfigManager	Load config values from a JSON/YAML file (e.g., data source type, paths)
🔜 ProcessorFactory	Optional: dynamically choose processor logic if more than one

🔹 Phase 5: Production Readiness
Module/Tool	Purpose
🔜 CommandLineParser	Handle argc/argv flags (e.g., --config, --verbose, etc.)
🔜 Unit Tests (GoogleTest)	Add unit tests for DataProcessor, ThreadSafeQueue, etc.
🔜 Logging Enhancements	Add log levels (INFO/DEBUG/ERROR), optional log rotation
🔜 Benchmark Suite	Add Google Benchmark for microbenchmarking key parts
🔜 CMake Packaging	Polish CMakeLists.txt, support make install, make test
🔜 Valgrind/ASAN Ready	Memory safety tools for final verification

🧠 Optional Future Phases
Module/Feature	Purpose
🌐 WebSocketClient	Stream output to a real-time dashboard
💾 DatabaseWriter	Write processed output to SQLite or PostgreSQL
🔁 RingBufferQueue	Replace simple queue with circular buffer for bounded memory use
⚡ ThreadPool	Switch from fixed threads to reusable thread pool
📈 Real-Time Stats	Show live metrics like throughput, latency, errors

✅ Summary of Remaining Modules by Category
🏗 Core Enhancements:
OutputWriter++

OutputFormatter

APIDataSource

⚙️ Config & Abstraction:
ConfigManager

DataSourceFactory

ProcessorFactory (optional)

🚀 Production:
CommandLineParser

GoogleTest unit test suite

Logging system improvements

Benchmarking tools

Memory sanitizers (Valgrind/ASAN)

🌟 Optional Advanced:
WebSocketClient

DatabaseWriter

RingBufferQueue

ThreadPool



🔧 Recommended Order of Implementation
🟨 Phase 7: Enhancements
Order	Feature	Reason/
// 1️⃣	Graceful Shutdown	Ensures clean exits, avoids thread/resource leaks. Essential for production safety.
// 2️⃣	Retry Logic for API Failures	Makes your API ingestion more robust to network issues and transient failures.
// 3️⃣	Multisource Ingest (API + File)	Demonstrates flexibility — process real-time and static data simultaneously.
4️⃣	Support JSON/CSV	Widens adoption — users can choose preferred data format. Easy to configure.
// 5️⃣	Live Metrics (Custom or Prometheus)	Useful once system is stable. Helps in visibility and diagnostics.

🧠 Optional Future Phases
Order	Module	Reason
// 6️⃣	ThreadPool	Replaces fixed threads; boosts concurrency efficiency and prepares for scaling.
// 7️⃣	RingBufferQueue	Introduces bounded memory usage — critical for long-running or embedded systems.
8️⃣	Real-Time Stats (Throughput/Latency/Error Rate)	Ideal once your ThreadPool and metrics tracking are in place.
9️⃣	WebSocketClient	Streams processed data to a live dashboard. Better to do after core enhancements.
// 🔟	DatabaseWriter	Persists output in a structured DB. Optional but powerful for integration and analytics.


✅ Graceful Shutdown → Retry Logic → Multisource Ingest → ThreadPool

./RealTimeDataPipeline --config=../config/config.json --data_source=api --verbose
